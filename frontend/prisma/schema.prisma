// ChandraHoro V2.1 - Complete Database Schema
// MySQL with Prisma ORM for AI-powered Vedic Astrology platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Required for PlanetScale
}

// ========================================
// AUTHENTICATION MODELS (NextAuth.js)
// ========================================

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  emailVerified     DateTime?
  password          String?        // For email/password auth
  name              String?
  image             String?
  
  // OAuth relations
  accounts          Account[]
  sessions          Session[]
  
  // App-specific relations
  profile           Profile?
  birthCharts       BirthChart[]
  readings          Reading[]
  conversations     Conversation[]
  partnerProfiles   PartnerProfile[]
  entitlement       Entitlement?
  aiUsageLogs       AIUsageLog[]
  compatibilityReports CompatibilityReport[]
  alerts            Alert[]
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@index([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ========================================
// CHANDRAHORO APPLICATION MODELS
// ========================================

model Profile {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  fullName                  String?
  avatarUrl                 String?
  phone                     String?
  language                  String   @default("en") // 'en' | 'te'
  theme                     String   @default("auto") // 'light' | 'dark' | 'auto'
  tonePreference            String   @default("practical") // 'mystic' | 'practical' | 'playful'
  notificationPreferences   Json     @default("{\"daily_reading\": true, \"transit_alerts\": true, \"email_notifications\": true}")
  timezone                  String   @default("Asia/Kolkata")
  onboardingCompleted       Boolean  @default(false)
  
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@index([userId])
  @@map("profiles")
}

model BirthChart {
  id            String   @id @default(cuid())
  userId        String
  
  // Birth details
  birthDate     DateTime @db.Date
  birthTime     String   // Store as "HH:MM:SS"
  birthPlace    String
  latitude      Decimal  @db.Decimal(10, 8)
  longitude     Decimal  @db.Decimal(11, 8)
  timezone      String
  
  // Calculated chart data
  planets       Json     // Planet positions with degrees
  houses        Json     // House cusps and systems
  aspects       Json     // Planetary aspects and strengths
  
  // Key chart points
  ascendant     String   // Rising sign
  sunSign       String   // Sun sign
  moonSign      String   // Moon sign
  
  // Dasha system
  currentDasha  Json     // Current Vimshottari Dasha period
  dashaTimeline Json     // Complete 120-year dasha timeline
  
  // Chart preferences
  chartStyle    String   @default("north_indian") // 'north_indian' | 'south_indian' | 'bengali'
  houseSystem   String   @default("whole_sign") // 'whole_sign' | 'placidus' | 'koch'
  ayanamsa      String   @default("lahiri") // 'lahiri' | 'raman' | 'krishnamurti'
  
  isPrimary     Boolean  @default(true)
  chartName     String?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings      Reading[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([userId, isPrimary])
  @@map("birth_charts")
}

model Reading {
  id                  String    @id @default(cuid())
  userId              String
  chartId             String?
  
  readingType         String    // 'daily' | 'weekly' | 'monthly' | 'transit' | 'compatibility'
  readingDate         DateTime  @db.Date
  
  title               String
  summary             String    @db.Text
  content             Json      // Structured reading content
  highlights          Json      // Key highlights array
  
  // Category-specific readings
  workReading         String?   @db.Text
  loveReading         String?   @db.Text
  healthReading       String?   @db.Text
  financeReading      String?   @db.Text
  
  // Timing guidance
  auspiciousTimings   Json?     // Favorable time windows
  inauspiciousTimings Json?     // Times to avoid
  
  // AI metadata
  aiModel             String    // Model used for generation
  tokensUsed          Int       @default(0)
  generationTimeMs    Int?
  promptVersion       String?
  
  // Status and user interaction
  status              String    @default("published") // 'draft' | 'published' | 'archived'
  isRead              Boolean   @default(false)
  isSaved             Boolean   @default(false)
  userFeedback        String?   // 'helpful' | 'not_helpful'
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chart               BirthChart? @relation(fields: [chartId], references: [id], onDelete: SetNull)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  publishedAt         DateTime?
  
  @@unique([userId, readingType, readingDate])
  @@index([userId])
  @@index([readingDate])
  @@index([userId, readingDate])
  @@index([userId, status])
  @@map("readings")
}

model Conversation {
  id              String    @id @default(cuid())
  userId          String
  chartId         String?
  
  title           String?
  summary         String?   @db.Text
  contextType     String?   // 'general' | 'chart_specific' | 'reading_followup'
  contextData     Json?     // Additional context for AI
  
  messageCount    Int       @default(0)
  totalTokens     Int       @default(0)
  isArchived      Boolean   @default(false)
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        Message[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastMessageAt   DateTime?
  
  @@index([userId])
  @@index([userId, lastMessageAt])
  @@index([userId, isArchived])
  @@map("conversations")
}

model Message {
  id              String       @id @default(cuid())
  conversationId  String
  userId          String
  
  role            String       // 'user' | 'assistant' | 'system'
  content         String       @db.Text
  
  // AI metadata
  aiModel         String?
  tokensUsed      Int          @default(0)
  responseTimeMs  Int?
  
  // Context and references
  chartReferences Json?        // References to chart elements
  sources         Json?        // Source citations
  
  isEdited        Boolean      @default(false)
  editedAt        DateTime?
  
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime     @default(now())
  
  @@index([conversationId])
  @@index([conversationId, createdAt])
  @@map("messages")
}

model Entitlement {
  id                  String    @id @default(cuid())
  userId              String    @unique

  // Plan configuration
  planType            String    @default("free") // 'free' | 'basic' | 'pro' | 'enterprise'
  planStatus          String    @default("active") // 'active' | 'suspended' | 'cancelled'

  // AI usage limits
  aiEnabled           Boolean   @default(true)
  dailyRequestLimit   Int       @default(10)
  dailyTokenLimit     Int       @default(50000)

  // Current usage (resets daily at midnight IST)
  dailyRequestsUsed   Int       @default(0)
  dailyTokensUsed     Int       @default(0)
  quotaResetAt        DateTime

  // Feature access
  allowedModels       Json      @default("[\"claude-3-haiku-20240307\"]")
  allowedFeatures     Json      @default("{\"daily_reading\": true, \"ai_chat\": true, \"compatibility\": false, \"pdf_reports\": false}")

  // Rate limiting
  rateLimitPerHour    Int       @default(100)
  rateLimitPerMinute  Int       @default(10)

  // Quota behavior
  capMode             String    @default("soft") // 'soft' | 'hard'
  customLimits        Json?     // Override limits for specific users

  // Billing integration
  stripeCustomerId    String?
  stripeSubscriptionId String?
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userId])
  @@index([planType])
  @@index([quotaResetAt])
  @@map("entitlements")
}

model AIUsageLog {
  id                String   @id @default(cuid())
  userId            String

  // Request details
  requestType       String   // 'reading' | 'chat' | 'compatibility'
  endpoint          String

  // AI provider details
  aiProvider        String   // 'anthropic'
  aiModel           String   // 'claude-3-haiku-20240307'

  // Token usage
  tokensInput       Int      @default(0)
  tokensOutput      Int      @default(0)
  tokensTotal       Int      @default(0)

  // Cost tracking (in USD)
  costInput         Decimal  @db.Decimal(10, 6) @default(0)
  costOutput        Decimal  @db.Decimal(10, 6) @default(0)
  costTotal         Decimal  @db.Decimal(10, 6) @default(0)

  // Performance metrics
  responseTimeMs    Int?
  status            String   // 'success' | 'error' | 'timeout' | 'rate_limited'
  errorMessage      String?  @db.Text

  // Related entities
  relatedEntityType String?  // 'reading' | 'conversation' | 'chart'
  relatedEntityId   String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([aiModel])
  @@map("ai_usage_logs")
}

model PartnerProfile {
  id                    String    @id @default(cuid())
  userId                String

  // Partner details
  name                  String
  relationship          String    // 'partner' | 'spouse' | 'friend' | 'family'

  // Birth information
  birthDate             DateTime  @db.Date
  birthTime             String?   // Optional for compatibility
  birthPlace            String?
  latitude              Decimal?  @db.Decimal(10, 8)
  longitude             Decimal?  @db.Decimal(11, 8)
  timezone              String?

  // Calculated chart data
  chartData             Json?     // Stored chart calculations

  // Compatibility analysis
  compatibilityScore    Decimal?  @db.Decimal(3, 1) // 0.0 to 10.0
  compatibilityDetails  Json?     // Detailed compatibility breakdown
  lastCompatibilityCheck DateTime?

  // User preferences
  isFavorite            Boolean   @default(false)
  notes                 String?   @db.Text

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
  @@index([userId, isFavorite])
  @@map("partner_profiles")
}

model CompatibilityReport {
  id                    String    @id @default(cuid())
  userId                String

  // Partner details
  person1Name           String
  person2Name           String
  person1BirthData      Json      // Complete birth chart data
  person2BirthData      Json      // Complete birth chart data

  // Compatibility analysis
  compatibilityScore    Decimal   @db.Decimal(3, 1) // 0.0 to 10.0
  kutaScores            Json      // Detailed Kuta breakdown
  strengths             Json      // Array of strengths
  challenges            Json      // Array of challenges

  // AI-generated content
  narrative             String    @db.Text
  aiModel               String
  tokensUsed            Int       @default(0)
  generationTimeMs      Int?

  // Status and metadata
  isShared              Boolean   @default(false)
  shareToken            String?   @unique

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
  @@index([userId, createdAt])
  @@map("compatibility_reports")
}

model Alert {
  id          String   @id @default(cuid())
  userId      String
  alertType   String   // 'transit', 'reading', 'system'
  title       String
  message     String   @db.Text
  severity    String   // 'low', 'medium', 'high', 'critical'
  metadata    Json?
  isDismissed Boolean  @default(false)
  isRead      Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, alertType])
  @@index([expiresAt])
  @@index([userId, isDismissed])
  @@map("alerts")
}
